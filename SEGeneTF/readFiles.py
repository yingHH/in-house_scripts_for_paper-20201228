# -*- coding: utf-8 -*-
"""
Created on 2018-11-30 17:20:04
Last Modified on 2018-11-30 17:20:04

Functions for reading in files.

@Author: Ying Huang
"""
from collections import Iterable
import os
import pandas as pd
import re


def read_se(se_bed):
    """Read in super enhancer file that generated by ROSE.
    
    se_bed: <Path> ROSE result file named '*_AllEnhancers.table.txt'."""

    enhs = pd.read_csv(se_bed, skiprows=5, sep='\t')
    se = enhs[enhs['isSuper'].astype(int) == 1]
    se = se[['REGION_ID', 'CHROM', 'START', 'STOP']]

    print('<SE numbers:> ', len(se))

    return se.copy()


def read_annotation(ucsc_refseq, if_rm_chr=True, exp=None, exp_id_type='tx'):
    """Read in genes annotation file in a table separated format.
    (download from: http://genome.ucsc.edu/cgi-bin/hgTables)
    
    ucsc_refseq: <Path> genes annotation file in a table separated format.
    if_rm_chr: <bool> if is True, 'chr' will be removed from chromsome 
        symbol.
    exp: <tuple> expressed gene id list.
    exp_id_type: <str> choose 'tx' for transcripts IDs, 'gn' for gene names."""

    id_types_dict = {
        'tx': 'name',
        'gn': 'name2',
    }

    refseq = pd.read_csv(ucsc_refseq, sep='\t')
    refseq = refseq[['name', 'chrom', 'strand', 'txStart', 'txEnd', 'name2']]

    if if_rm_chr is True:
        refseq['chrom'] = refseq['chrom'].map(
            lambda x: x[3:] if re.match(r'((chr)|(CHR)|(Chr)).+', x) else x
        )

    if exp is not None:
        id_colname = id_types_dict[exp_id_type]
        refseq = refseq[refseq[id_colname].isin(exp)]

    return refseq.copy()


def read_exp_genes(genes_exp, min_exp_thread=5, if_has_header=True):
    """Get expressed genes list.
    
    genes_exp: <Path> a CSV file (two columns) contains gene expression             information. First column should be <str> gene ids, second column           should be <float> gene expression values.
    min_exp_thread: <float> thread used for judging if gene expressed.
    if_has_header: <bool> if true, use the first row of CSV file as header.
    """
    min_exp_thread = float(min_exp_thread)

    if if_has_header is True:
        exp = pd.read_csv(genes_exp)
    else:
        exp = pd.read_csv(genes_exp, header=None)

    # get genes that expression values larger than (or equal to) min_exp_thread
    exp = exp[exp.iloc[:, 1].astype(float) >= min_exp_thread]
    exp.columns = ['ids', 'exp']

    print('<Expressed genes:> {}'.format(len(exp)))

    return exp.copy()


def read_chip_sigal_regions(ifile):
    """Read in Chip-Seq signal reads. Such as the result MACS2.
    
    ifile: <Path> a bed format file, that contains Chip-Seq signal regions.
        Could be a result of MACS2."""

    sig = pd.read_csv(ifile, header=None, sep='\t')
    sig = sig.iloc[:, :4]
    sig.columns = ['chr', 'start', 'end', 'name']

    return sig.copy()


def read_tf_db(tf_db_path):
    """Read in TF database of crcmapper.
    
    tf_db_path: <Path> a TF database file, which is in 'TFlist_*.txt' format."""

    tf_db = pd.read_csv(tf_db_path, sep='\t')
    tf_db.columns = ['ids', 'names']

    return tf_db.copy()


def read_crc_tf(crc_tf_path):
    """Read in TF in CRCs, and return a set.
    
    crc_tf_path: <Path> result of CRCmapper, which is in '*_CRC_SCORES.txt'     
        fromat."""

    crc_tfs = set()
    with open(crc_tf_path, 'rt') as f:
        for line in f:
            tfs = set(re.findall(r"\'([^\']+)\'", line.split('\t')[0]))
            crc_tfs = crc_tfs | tfs

    return crc_tfs


def read_each_crc_tf(crc_tf_path):
    """Read in TF in CRCs, and return a tuple.
    
    crc_tf_path: <Path> result of CRCmapper, which is in '*_CRC_SCORES.txt'     
        fromat."""

    crc_tfs = []
    with open(crc_tf_path, 'rt') as f:
        for line in f:
            tfs = re.findall(r"\'([^\']+)\'", line.split('\t')[0])
            crc_tfs.append(tfs)

    return crc_tfs.copy()


def read_tfs(tfs):
    """Read tfs from 'iterator' or CSV/TXT file. CSV/TXT file should be
    one tf name per line.

    parameters:
        tfs: <iter | Path> input transcriptional regulator name(s).
    """
    assert isinstance(tfs, str) or isinstance(tfs, Iterable)

    tfs_set = None

    if isinstance(tfs, str) and os.path.exists(tfs):
        if tfs.endswith('.csv'):
            tmp_tfs = pd.read_csv(tfs, header=None)
            tfs_set = set(tmp_tfs[0])
        elif tfs.endswith('.txt'):
            tmp_tfs = pd.read_table(tfs, header=None)
            tfs_set = set(tmp_tfs[0])
    elif not isinstance(tfs, str) and isinstance(tfs, Iterable):
        tfs_set = set(tfs)
    else:
        raise Exception('<ERR:> should input a Path or a Iterable object.')

    return tfs_set
